# -*- coding: utf-8 -*-
"""regression functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SRnIsqgFAHFashYuB699MwnFeENCR1EU

##Selecting The Best Degree for polynomialfeatures based on Highest R2Score and getting the following:

1-The Best R2Score obtained

2-The Best Degree for recommendation
"""

def slct_bst_dgree(x_train,x_test,y_train,y_test,degrees):
  #import dependencies
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import sklearn 
  from sklearn.preprocessing import PolynomialFeatures
  from sklearn.linear_model import LinearRegression
  from sklearn.metrics import r2_score
  #intiate variables
  global dgres_r2
  dgres_r2={}
  global int_degree
  int_degree=1
  #while loop
  while int_degree <= degrees:
    poly = PolynomialFeatures(degree = int_degree)
    x_poly= poly.fit_transform(x_train)
    x_test_poly= poly.transform(x_test)

    poly_lgs =LinearRegression()
    poly_lgs.fit(x_poly,y_train)
    y_poly_pred = poly_lgs.predict(x_test_poly)
    
    r2score = r2_score(y_test,y_poly_pred)
    #assign r2score as a key and its degree as a value
    dgres_r2[r2score]=int_degree
    #increase the number of degrees as the itrator work!
    int_degree +=1
    #end of loop
  bst_r2scr = max(dgres_r2.keys())
  bst_dgre = dgres_r2[bst_r2scr]
  print ('list of r2score with different degrees was:',dgres_r2)
  print ('r2 score is :',bst_r2scr,'\n the best degree is :', bst_dgre,)
  return bst_r2scr , bst_dgre

"""##Running LinerRegression with selected degree and getting in return the following:
1-R2Score

2-The model itself

3-The used polynomial

4- predicted Y
"""

def poly_lner_reg (x_train,x_test,y_train,y_test,degree):
  import numpy as np
  import pandas as pd
  import sklearn 
  from sklearn.preprocessing import PolynomialFeatures
  from sklearn.metrics import r2_score
  from sklearn.linear_model import LinearRegression
  poly_reg = PolynomialFeatures(degree = degree)
  x_train_poly = poly_reg.fit_transform(x_train)
  x_test_poly = poly_reg.transform(x_test)
  lin_reg = LinearRegression()
  lin_reg.fit(x_train_poly, y_train)
  pred=lin_reg.predict(x_test_poly)
  r_score = r2_score(y_test,pred)
  print('r2 scaore is : ',r_score)
  return r_score, lin_reg , poly_reg , pred

"""##Selecting The best Alpha for Ridge based on highest R2Score and getting the following:

1- The best R2Score

2- The Best Alpha

3- The Ridge model itself

4- The used poly
"""

def ridg_bst_alpha(x_train,x_test,y_train,y_test,alpha_list,degree):
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import sklearn 
  from sklearn.preprocessing import PolynomialFeatures
  from sklearn.metrics import r2_score
  from sklearn.linear_model import Ridge
  poly=PolynomialFeatures(degree=degree)
  x_train=poly.fit_transform(x_train)
  x_test=poly.fit_transform(x_test) 
  global alphas
  alphas={}
  for xalpha in alpha_list:
    ridge=Ridge(alpha= xalpha,normalize=True)
    ridge.fit(x_train,y_train)
    pred=ridge.predict(x_test)
    r_score = r2_score(y_test,pred)
    alphas[r_score]=xalpha
  bst_r_score= max(alphas.keys())
  bst_alpha= alphas[bst_r_score]
  print ('values of alpha are:',alphas)
  print('best r2 scaore is : ',bst_r_score)
  print ('best alpha is:',bst_alpha)
  return bst_r_score , bst_alpha , ridge , poly

"""##Selecting The best Alpha for Lasso based on highest R2Score and getting the following:

1- The best R2Score

2- The Best Alpha

3- The Lasso model itself

4- The used poly
"""

def lasso_bst_alpha(x_train,x_test,y_train,y_test,alpha_list,degree):
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
  import sklearn 
  from sklearn.preprocessing import PolynomialFeatures
  from sklearn.metrics import r2_score
  from sklearn.linear_model import Lasso
  poly=PolynomialFeatures(degree=degree)
  x_train=poly.fit_transform(x_train)
  x_test=poly.fit_transform(x_test) 
  global alphas
  alphas={}
  for xalpha in alpha_list:
    lasso=Lasso(alpha= xalpha,normalize=True)
    lasso.fit(x_train,y_train)
    pred=lasso.predict(x_test)
    r_score = r2_score(y_test,pred)
    alphas[r_score]=xalpha
  bst_r_score= max(alphas.keys())
  bst_alpha= alphas[bst_r_score]
  print ('values of alpha are:',alphas)
  print('best r2 scaore is : ',bst_r_score)
  print ('best alpha is:',bst_alpha)
  return bst_r_score , bst_alpha , lasso , poly

